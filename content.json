{"meta":{"title":"梢的博客","subtitle":"人恒之而远","description":null,"author":"就叫我小王吧","url":"https://1103442828.github.io","root":"/"},"pages":[{"title":"分类","date":"2020-01-15T08:22:04.000Z","updated":"2020-01-17T08:30:07.017Z","comments":false,"path":"categories/index.html","permalink":"https://1103442828.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-01-15T08:13:02.000Z","updated":"2020-01-17T08:29:52.083Z","comments":false,"path":"tags/index1.html","permalink":"https://1103442828.github.io/tags/index1.html","excerpt":"","text":""},{"title":"标签","date":"2020-01-15T08:13:02.000Z","updated":"2020-01-17T08:30:37.851Z","comments":false,"path":"tags/index.html","permalink":"https://1103442828.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Vue Bus事件中心 多次触发的坑","slug":"Vue Bus事件中心 多次触发的坑","date":"2020-04-22T03:03:40.694Z","updated":"2020-04-22T03:08:52.121Z","comments":true,"path":"/blog/Vue Bus事件中心 多次触发的坑.html","link":"","permalink":"https://1103442828.github.io/blog/Vue%20Bus%E4%BA%8B%E4%BB%B6%E4%B8%AD%E5%BF%83%20%E5%A4%9A%E6%AC%A1%E8%A7%A6%E5%8F%91%E7%9A%84%E5%9D%91.html","excerpt":"","text":"Vue 中事件处理 在子组件和父组件中 父组件可以通过props向下传递数据，子组件则可以用 emit向上传递。但在两个没有嵌套关系的组件中或者想指定触发某个操作时则可以用 Bus 事件中心。现在我有这样一个组件 List 组件 123456&lt;template&gt; &lt;div class=\"list\"&gt; &lt;tabs :list=\"tabList\" &lt;/tabs&gt; &lt;/div&gt;&lt;/template&gt; List组件中 嵌套使用tabs 组件 12345678910111213&lt;template&gt; &lt;van-tabs v-model=\"nums\" &gt; &lt;template v-for=\"item in dataList\"&gt; &lt;van-tab :title=\"item.title\" :name='item.type' :badge=\"item.num || ''\" :key='item.title'&gt; &lt;list-Card :action='item.type' :list='item' &gt;&lt;/list-Card&gt; &lt;/van-tab&gt; &lt;/template&gt; &lt;/van-tabs&gt;&lt;/template&gt; tabs组件复用list-card 展示列表数据效果像下图每个tab 对应各自的list-card列表数据 但有一个标签列表是显示所有类型数据 当我在此列表里去增加或删除某个数据后其他列表数据也应更新 如果每次切换tab 都去请求一次数据的话对用户体验不好 所有这里使用的vant组件库的tab组件 他自带缓存效果 每个tab列表只在第一次去请求数据 。但是我先在执行操作后去更新其他列表的数据 这里我使用Bus 事件中心我们在 List组件中执行操作请求后去触发事件 12// List 组件 Bus.$emit('handleRefreshLeaveList') 在 list-card 中监听这个事件 123456// list-card 组件 这个组件是复用的 所有每个组件都会有监听 Bus.$on('handleRefreshLeaveList', () =&gt; &#123; //请求对应列表数据 getListData() &#125;) 坑就在出现了 我们去执行增删后 其他的列表数据也会更新没问题 但是如果我们没有去销毁这个事件监听 那么我们多次进出这几个界面 它会多次注册这个监听事件 比如我这里有三个tab 那么就会有三个监听事件 如果我们出去再进入这个界面 他又会去注册三个 现在我们就有6个 当这个事件被触发 对应的6个事件监听都监听到 都会去执行方法体内容 看图 第一次我们进入 执行操作后 只请求了3次（GetLeavePageResult） 因为我有3个列表是没问题的然后我们退出这个界面在进入 去执行操作后 他去请求了6次 因为没有销毁监听事件 它重复注册 依次类推是9次请求如下所以在注册监听事件后一定要记得去销毁 不然会存在重复执行操作销毁监听事件如下 123beforeDestroy () &#123; Bus.$off('handleRefreshLeaveList') &#125; 好了 今天就分享到这里","categories":[{"name":"Vue","slug":"Vue","permalink":"https://1103442828.github.io/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://1103442828.github.io/tags/Vue/"},{"name":"事件中心","slug":"事件中心","permalink":"https://1103442828.github.io/tags/%E4%BA%8B%E4%BB%B6%E4%B8%AD%E5%BF%83/"}]},{"title":"vue 动态视频登陆界面 简约冷淡风","slug":"vue 动态视频登陆界面 简约冷淡风","date":"2020-04-03T08:39:21.292Z","updated":"2020-04-03T08:53:37.378Z","comments":true,"path":"/blog/vue 动态视频登陆界面 简约冷淡风.html","link":"","permalink":"https://1103442828.github.io/blog/vue%20%E5%8A%A8%E6%80%81%E8%A7%86%E9%A2%91%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2%20%E7%AE%80%E7%BA%A6%E5%86%B7%E6%B7%A1%E9%A3%8E.html","excerpt":"","text":"介绍本文章介绍 视频背景的登陆界面 使用的vue + Coverr 话不多说来看看成品 首先使用vue-cli 创建 一个项目 不会的话先去看看吧vue-cli再建好 .vue 类型的单文件组件 做界面 。下面来看看我们的具体代码 HTML 代码12345678910111213141516&lt;template&gt; &lt;div class=\"homepage-hero-module\"&gt; &lt;div class=\"video-container\"&gt; &lt;div :style=\"fixStyle\" class=\"filter\"&gt;&lt;/div&gt; &lt;video :style=\"fixStyle\" autoplay loop class=\"fillWidth\" v-on:canplay=\"canplay\"&gt; &lt;source src=\"视频文件路径\" type=\"video/mp4\"/&gt; 浏览器不支持 video 标签，建议升级浏览器。 &lt;source src=\"视频文件路径\" type=\"video/webm\"/&gt; 浏览器不支持 video 标签，建议升级浏览器。 &lt;/video&gt; &lt;div class=\"poster hidden\" v-if=\"!vedioCanPlay\"&gt; &lt;img :style=\"fixStyle\" src=\"没有播放时的图片路径\" alt=\"\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt; ！！！注意在google浏览器里面 是禁止视频自动播放的 因为google认为这对用户体验不好 。 ！！！解决方法 设置静音播放 muted=’muted’ 这样就能正常播放了↓↓↓ 1&lt;video :style=\"fixStyle\" autoplay loop class=\"fillWidth\" muted='muted' v-on:canplay=\"canplay\"&gt; JS 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;script&gt; export default &#123; name: 'login', data() &#123; return &#123; vedioCanPlay: false, fixStyle: '' &#125; &#125;, methods: &#123; canplay() &#123; this.vedioCanPlay = true &#125; &#125;, mounted: function() &#123; window.onresize = () =&gt; &#123; const windowWidth = document.body.clientWidth const windowHeight = document.body.clientHeight const windowAspectRatio = windowHeight / windowWidth let videoWidth let videoHeight if (windowAspectRatio &lt; 0.5625) &#123; videoWidth = windowWidth videoHeight = videoWidth * 0.5625 this.fixStyle = &#123; height: windowWidth * 0.5625 + 'px', width: windowWidth + 'px', 'margin-bottom': (windowHeight - videoHeight) / 2 + 'px', 'margin-left': 'initial' &#125; &#125; else &#123; videoHeight = windowHeight videoWidth = videoHeight / 0.5625 this.fixStyle = &#123; height: windowHeight + 'px', width: windowHeight / 0.5625 + 'px', 'margin-left': (windowWidth - videoWidth) / 2 + 'px', 'margin-bottom': 'initial' &#125; &#125; &#125; window.onresize() &#125; &#125;&lt;/script&gt; css 代码1234567891011121314151617181920&lt;style scoped&gt; .homepage-hero-module, .video-container &#123; position: relative; height: 100vh; overflow: hidden; &#125; .video-container .poster img, .video-container video &#123; z-index: 0; position: absolute; &#125; .video-container .filter &#123; z-index: 1; position: absolute; background: rgba(0, 0, 0, 0.4); &#125;&lt;/style&gt; 这里只是介绍了视频背景的代码,如果要在上面加输入框等则在 class=”video-container” div 里写个div 并设置css position: absolute z-index: 100 要大于视频背景的优先级 不然会被掩盖。 1234567891011121314151617181920&lt;template&gt; &lt;div class=\"homepage-hero-module\"&gt; &lt;div&gt;........视频播放代码.......&lt;/div&gt; //我们要加上去的组件 &lt;div class=\"box\"&gt; ...... &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;//css.box&#123; position: absolute; z-index: 100; width: 100%; height: 100%; &#125; 如果还想添加动画 可以用 transition标签包裹 详情看看vue 动画 12345678910111213141516171819202122&lt;transition name=\"fade\"&gt; &lt;div v-if=\"show\"&gt;.... &lt;/div&gt;&lt;/transition&gt;//js&lt;script&gt;data () &#123; return &#123; show: false &#125;&#125;&lt;/script&gt;//css.fade-enter-active, .fade-leave-active &#123; transition: opacity .5s;&#125;.fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ &#123; opacity: 0;&#125; 好啦 喜欢快去试试吧！","categories":[{"name":"Vue","slug":"Vue","permalink":"https://1103442828.github.io/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://1103442828.github.io/tags/Vue/"},{"name":"登陆界面","slug":"登陆界面","permalink":"https://1103442828.github.io/tags/%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2/"}]},{"title":"使用node.js和express自动导入路由和数据表","slug":"使用node.js和express自动导入路由和数据表","date":"2020-01-16T07:24:26.977Z","updated":"2020-01-17T08:56:09.774Z","comments":true,"path":"/blog/使用node.js和express自动导入路由和数据表.html","link":"","permalink":"https://1103442828.github.io/blog/%E4%BD%BF%E7%94%A8node.js%E5%92%8Cexpress%E8%87%AA%E5%8A%A8%E5%AF%BC%E5%85%A5%E8%B7%AF%E7%94%B1%E5%92%8C%E6%95%B0%E6%8D%AE%E8%A1%A8.html","excerpt":"","text":"当我们添加一个路由时 每次都需要在app.js 去设置路由 这样比较繁琐。 我们可以通过创建一个模块来 自动设置文件夹下的所以路由。在路由表文件夹下创建一个index.js通过 fs 获取文件夹下所有.js的文件 index.js除外（readdirSync方法）再获取文件的路径（forEach方法） 因为app.js里面设置的原理也是通过路径 来获取路由对象的再通过数组保存路径 1234567891011121314151617181920let fs=require(&apos;fs&apos;);let path=require(&apos;path&apos;);let apis=[];fs.readdirSync(__dirname).filter(function(filename)&amp;#123 return (filename!==&apos;index.js&apos;)&amp;&amp;(filename.slice(-3)===&apos;.js&apos;);&amp;#125).forEach(function(filename)&amp;#123 let filepath=path.join(__dirname,filename); apis.push(require(filepath))&amp;#125)var express=require(&apos;express&apos;);var router=express.Router();router.use(&apos;/&apos;,apis);module.exports=router; 代码如图然后在app.js里面 添加一个模块的路由就行了 以后访问就是 http://localhost:3000/apis/xxx我这里用的自己主机注意！！ url那里的apis 是和你自己设置路由的名字是一样的 不然不能访问 下面我们来试试数据库表的导入差不多 我在models 下建了table.js 模块代码如下 1234567891011121314151617181920212223242526272829let Sequlize=require(&apos;sequelize&apos;);let fs=require(&apos;fs&apos;);let path=require(&apos;path&apos;);let sequelize=new Sequlize(&quot;test&quot;,&quot;stu&quot;,&quot;Ydyykf17&quot;,&amp;#123 host:&quot;192.168.1.52&quot;, dialect:&quot;mysql&quot;, timezone:&quot;+8:00&quot;&amp;#125)let db=&amp;#123&amp;#125;fs.readdirSync(__dirname).filter(function(filename)&amp;#123 return (filename!==&apos;tables.js&apos;)&amp;&amp;(filename.slice(-3)===&apos;.js&apos;);&amp;#125).forEach(function(filename)&amp;#123let filepath=path.join(__dirname,filename);let model=sequelize.import(filepath);db[model.name]=model;&amp;#125)sequelize.sync();module.exports = &amp;#123 db&amp;#125; 第一次写 不足之处可以支持 一起进步谢谢哦","categories":[{"name":"node.js","slug":"node-js","permalink":"https://1103442828.github.io/categories/node-js/"}],"tags":[{"name":"node.js","slug":"node-js","permalink":"https://1103442828.github.io/tags/node-js/"}]},{"title":"墨者学院_主机溢出提权漏洞（包含工具）","slug":"墨者学院_主机溢出提权漏洞（包含工具）","date":"2020-01-15T03:28:29.057Z","updated":"2020-01-17T08:58:33.923Z","comments":true,"path":"/blog/墨者学院_主机溢出提权漏洞（包含工具）.html","link":"","permalink":"https://1103442828.github.io/blog/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2_%E4%B8%BB%E6%9C%BA%E6%BA%A2%E5%87%BA%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%EF%BC%88%E5%8C%85%E5%90%AB%E5%B7%A5%E5%85%B7%EF%BC%89.html","excerpt":"","text":"1.启动环境 2.这里使用asp一句话木马 密码为pass3. 设置浏览器代理 这里使用了Google浏览器 4.设置好代理后打开抓包工具 Burp Suite 5.上传我们写好的木马 点go 上传 6.抓包截取数据包后 在upload下建立一个后缀为.asp的目录 修改后放行 7.这里我们看到文件已经上传到服务器了 下面我们开始联菜刀 8.链接菜刀前先把抓包拦截关闭 顺便把代理也关掉 9.打开中国菜刀 右击添加 把服务器的ip加 端口 加我们木马的存放路径（就是返回地址）10.密码是我们木马里面写的（这里是pass） 11.脚本类型选择asp 点击添加 然后链接木马 12.成功链接到到主机 在C盘根目录发现一个key_1224513461.txt的文件 但是我们没有打开权限然后我们要开始提权 13.我们在我们上传木马的目录下上传一个 cmd.exe 的终端用来执行命令下载链接 cmd.exe 14.右击cmd 点击虚拟终端首先我们先设置终端的运行路径 用setp 加cmd.exe的路径。setp C:\\Inetpub\\wwwroot\\upload\\cmd.exe 15.设置好后我们再将将提权工具上传到主机 这里使用pr.exe提权工具！！！特别注意要先设置好cmd的运行路径后才上传pr.exe提权工具 否则可能不能提权！！！ 下载链接 pr.exe 16.这里提权有两种方式：1.cd 到pr.exe 的存放目录下使用：pr.exe “ type C:\\KEY_1224513461.txt”2.直接给出pr.exe的运行路径：C:\\Inetpub\\wwwroot\\upload\\pr.exe “type C:\\KEY_1224513461”双引号里面就是要执行的命令 也可以执行其他命令这里我们看到我们成功打开了文件 最下面一行就是key谢谢阅读 希望能帮到你","categories":[{"name":"网络攻防","slug":"网络攻防","permalink":"https://1103442828.github.io/categories/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/"}],"tags":[{"name":"网络攻防","slug":"网络攻防","permalink":"https://1103442828.github.io/tags/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/"},{"name":"主机提权","slug":"主机提权","permalink":"https://1103442828.github.io/tags/%E4%B8%BB%E6%9C%BA%E6%8F%90%E6%9D%83/"}]}]}